{"version":3,"sources":["components/Editor.js","components/InputPanel.js","components/OutputConsole.js","components/RegisterTable.js","components/StackTable.js","components/Assembly.js","App.js","serviceWorker.js","index.js"],"names":["Editor","setValue","type","className","onChange","e","target","value","InputPanel","props","useState","stepIntoDisable","setStepIntoDisable","nextDisable","setNextDisable","disabled","onClick","handleStepInto","handleNext","OutputConsole","output","map","index","key","getSteps","stepsArray","step","CL","NL","INST","A","B","C","D","EQ","NE","GT","LT","PRN","getStep","RegisterTable","steps","StackTable","stack","Assembly","machine","setOutput","setSteps","setStack","updateApp","getStack","getPrn","getTable","executor","load","execute","executeStepWise","nextStep","App","Machine","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dfd0626d.chunk.js","sourcesContent":["import React from 'react';\n\nconst Editor = ({ setValue }) => {\n  return (\n    <div>\n      <textarea\n        type=\"text\"\n        className=\"text-area\"\n        onChange={(e) => setValue(e.target.value)}\n      />\n    </div>\n  );\n};\n\nexport default Editor;\n","import React, { useState } from 'react';\nimport Editor from './Editor';\n\nconst InputPanel = (props) => {\n  const [value, setValue] = useState('');\n  const [stepIntoDisable, setStepIntoDisable] = useState(false);\n  const [nextDisable, setNextDisable] = useState(true);\n\n  return (\n    <div className=\"input-box\">\n      <Editor setValue={setValue} />\n      <div className=\"button-div\">\n        <button\n          className={stepIntoDisable ? 'disable' : 'enable'}\n          disabled={stepIntoDisable}\n          onClick={() => {\n            setStepIntoDisable(true);\n            setNextDisable(false);\n            props.handleStepInto(value);\n          }}\n        >\n          Step Into\n        </button>\n        <button\n          className=\"enable\"\n          onClick={() => {\n            setStepIntoDisable(false);\n            setNextDisable(true);\n            props.handleNext(value);\n          }}\n        >\n          Run\n        </button>\n        <button\n          className={nextDisable ? 'disable' : 'enable'}\n          disabled={nextDisable}\n          onClick={() => props.handleNext(value)}\n        >\n          Next\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default InputPanel;\n","import React from 'react';\n\nconst getFormattedOutput = (outputArray) => {\n  return outputArray.map((value, index) => <div key={index}>{value}</div>);\n};\n\nconst OutputConsole = ({ output }) => {\n  return <div className=\"output\">{getFormattedOutput(output)}</div>;\n};\n\nexport default OutputConsole;\n","import React from 'react';\n\nconst getStep = (step, index) => {\n  return (\n    <tr key={index}>\n      <td>{step.CL}</td>\n      <td>{step.NL}</td>\n      <td className=\"instruction\">{step.INST}</td>\n      <td>{step.A}</td>\n      <td>{step.B}</td>\n      <td>{step.C}</td>\n      <td>{step.D}</td>\n      <td>{step.EQ}</td>\n      <td>{step.NE}</td>\n      <td>{step.GT}</td>\n      <td>{step.LT}</td>\n      <td className=\"instruction\">{step.PRN}</td>\n    </tr>\n  );\n};\n\nconst getSteps = (stepsArray) => {\n  const formattedSteps = stepsArray.map((step, index) => {\n    return getStep(step, index);\n  });\n  return formattedSteps;\n};\n\nconst RegisterTable = ({ steps }) => {\n  return (\n    <div className=\"result-table\">\n      <table className=\"registerTable\">\n        <thead className=\"heading\">\n          <tr>\n            <th>CL</th>\n            <th>NL</th>\n            <th>INST</th>\n            <th>A</th>\n            <th>B</th>\n            <th>C</th>\n            <th>D</th>\n            <th>EQ</th>\n            <th>NE</th>\n            <th>GT</th>\n            <th>LT</th>\n            <th>PRN</th>\n          </tr>\n        </thead>\n        <tbody>{getSteps(steps)}</tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default RegisterTable;\n","import React from 'react';\n\nconst getStack = (stackArray) => {\n  return stackArray.map((value, index) => {\n    return (\n      <tr key={index}>\n        <th>{value}</th>\n      </tr>\n    );\n  });\n};\n\nconst StackTable = ({ stack }) => {\n  return (\n    <div className=\"stack-table\">\n      <table className=\"registerTable\">\n        <thead className=\"heading\">\n          <tr>\n            <th>STACK</th>\n          </tr>\n        </thead>\n        <tbody>{stack && getStack(stack)}</tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default StackTable;\n","import React, { useState } from 'react';\nimport InputPanel from './InputPanel';\nimport OutputConsole from './OutputConsole';\nimport RegisterTable from './RegisterTable';\nimport StackTable from './StackTable';\n\nconst Assembly = ({ machine }) => {\n  const [output, setOutput] = useState([]);\n  const [steps, setSteps] = useState([]);\n  const [stack, setStack] = useState([]);\n\n  const updateApp = () => {\n    setStack(machine.getStack());\n    setOutput(machine.getPrn());\n    setSteps(machine.getTable());\n  };\n\n  const executor = (value) => {\n    machine.load(value);\n    machine.execute();\n    updateApp();\n  };\n\n  const handleStepInto = (value) => {\n    machine.load(value);\n    machine.executeStepWise(updateApp);\n  };\n\n  const handleNext = () => {\n    machine.nextStep();\n  };\n\n  return (\n    <div className=\"main-container\">\n      <p>ASSEMBLY SIMULATOR</p>\n      <div className=\"input-output\">\n        <InputPanel\n          executor={executor}\n          handleStepInto={handleStepInto}\n          handleNext={handleNext}\n        />\n        <OutputConsole output={output} />\n      </div>\n      <div className=\"input-output\">\n        <RegisterTable steps={steps} />\n        <StackTable stack={stack} />\n      </div>\n    </div>\n  );\n};\n\nexport default Assembly;\n","import React from 'react';\nimport Machine from '@craftybones/assembly_simulator';\nimport Assembly from './components/Assembly';\nimport './App.css';\n\nfunction App() {\n  return <Assembly machine={new Machine()} />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}